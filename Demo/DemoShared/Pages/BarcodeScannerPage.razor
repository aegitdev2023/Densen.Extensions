@page "/barcodescanner"
@attribute [TabItemOption(Text = "条码扫描", Icon = "fa fa-barcode")]
@using ZXingBlazor.Components

<h3>条码扫描 BarcodeReader</h3>

<h4>扫描条码/QR码。</h4>

<button class="btn btn-primary"
        type="button"
        @onclick="(() => ShowScanBarcode = !ShowScanBarcode)">
    扫码
</button>
<input type="text" class="form-control" style="min-width: 100px;"
       @bind-value="BarCode"
       placeholder="条码" />
@if (ShowScanBarcode)
{

    <BarcodeReader ScanResult="((e) => { BarCode=e; ShowScanBarcode = !ShowScanBarcode; })"
                   Close="(()=>ShowScanBarcode=!ShowScanBarcode)"
                   OnError="OnError" />

}

<p>@message</p>


@code{

    /// <summary>
    /// 显示扫码界面
    /// </summary>
    bool ShowScanBarcode { get; set; } = false;

    /// <summary>
    /// 条码
    /// </summary>
    public string? BarCode { get; set; }

    private string? message;

    private Task OnError(string message)
    {
        this.message = message;
        StateHasChanged();
        return Task.CompletedTask;
    }


    /// <summary>
    /// 获得属性方法
    /// </summary>
    /// <returns></returns>
    private IEnumerable<AttributeItem> GetAttributes() => new AttributeItem[]
{
            new AttributeItem("ScanResult","扫码结果回调方法/Scan result callback method",  "","EventCallback<string>"),
            new AttributeItem("Close","关闭扫码框回调方法/Close scan code callback method","","EventCallback"),
            new AttributeItem("ScanBtnTitle","扫码按钮文本/Scan button title","扫码"),
            new AttributeItem("ResetBtnTitle","复位按钮文本/Reset button title","复位"),
            new AttributeItem("CloseBtnTitle","关闭按钮文本/Close button title","关闭"),
            new AttributeItem("SelectDeviceBtnTitle","选择设备按钮文本/Select device button title","选择设备"),
            new AttributeItem("OnError","错误信息回调/Error callback method",  "-","Func<string, Task>"),
            new AttributeItem("UseBuiltinDiv","使用内置DIV/Use builtin Div",  "true","Func<string, Task>"),
                                                    };

}

<Textarea @bind-Value="MessageString" />
<br />
<Button Text="生成二维码" OnClick="GenQrcode" />
<Button Text="返回二维码Svg流" OnClick="GenQrcodeSvg" />
<Button Text="解码" OnClick="DecodeFromImage" />
<BarCodes @ref="barCodes" OnQRCodeGen="OnQRCodeGen" OnDecodeFromImage="OnDecodeFromImage" OnError="OnError" />
<br />
<Textarea Value="@SvgString" />
<br />

@code{

    BarCodes? barCodes;

    string? MessageString { get; set; } = "测试二维码 https://www.blazor.zone";

    string? SvgString { get; set; }

    private async Task GenQrcode()
    {
        await barCodes!.QRCodeGen(string.IsNullOrWhiteSpace(MessageString)?"111111": MessageString);
    }

    private async Task GenQrcodeSvg()
    {
        await barCodes!.QRCodeGenSvg(string.IsNullOrWhiteSpace(MessageString) ? "111111" : MessageString);
    }

    private Task OnQRCodeGen(string message)
    {
        this.SvgString = message;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task DecodeFromImage()
    {
        await barCodes!.DecodeFromImage();
    }

    private Task OnDecodeFromImage(string message)
    {
        this.message = message;
        StateHasChanged();
        return Task.CompletedTask;
    }

}

<AttributeTable Items="@GetAttributes()" />

@implements IAsyncDisposable
@namespace AmeBlazor.Components
@inject IJSRuntime JS

<div class="signature-pad-body">
    <div id="signature-pad" class="signature-pad">
        <div class="signature-pad--body">
            <canvas width="1162" style="touch-action: none; user-select: none;" height="652"></canvas>
        </div>
        <div class="signature-pad--footer">
            <div class="description">Sign above/在框内签名</div>

            <div class="signature-pad--actions">
                <div>
                    <button type="button" class="button clear" data-action="clear">Clear</button>
                    <button type="button" class="button" data-action="change-color">Change color</button>
                    <button type="button" class="button" data-action="undo">Undo</button>

                </div>
                <div>
                    <button type="button" class="button save" data-action="save-base64">Save as Base64</button>
                    <button type="button" class="button save" data-action="save-png">Save as PNG</button>
                    <button type="button" class="button save" data-action="save-jpg">Save as JPG</button>
                    <button type="button" class="button save" data-action="save-svg">Save as SVG</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// SignaturePad 手写签名
    /// </summary>
    [Parameter]
    public EventCallback<string> SignaturePadBase64 { get; set; }

    /// <summary>
    /// 签名Base64
    /// </summary>
    [Parameter]
    public string? Result { get; set; }

    private IJSObjectReference? module;

    // To prevent making JavaScript interop calls during prerendering
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Densen.Component.Blazor/lib/signature_pad/app.js");
        await module.InvokeVoidAsync("init", DotNetObjectReference.Create(this), null);
    }

    [JSInvokable("invokeFromJS")]
    public async Task ChangeValue(string val)
    {
        Result = val;
        StateHasChanged();
        await SignaturePadBase64.InvokeAsync(val);
        //return Task.CompletedTask;
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            //await module.InvokeVoidAsync("destroy",null);
            await module.DisposeAsync();
        }
    }
}




@page "/viewerjs"
@implements IAsyncDisposable
@inject IJSRuntime JS
@namespace AmeBlazor.Components

@if (UseInsideImagesDiv) { 
<div class="docs-galley mb-3">
    <ul id="@Options.id" class="docs-pictures clearfix">
        @{
            var i = 0;
            foreach (var item in Images)
            {
                var alt = (Alts!=null && Alts.Any() && Alts.Count > i) ? Alts[i]:(item.Split('/').Last());
                <li><img src="@item" alt="@alt"></li>
                i++;
            }
        }
    </ul>
</div>
}

@code{
    /// <summary>
    /// 使用内置图片DIV
    /// </summary>
    [Parameter] public bool UseInsideImagesDiv { get; set; } = true;

    /// <summary>
    /// 图片列表
    /// </summary>
    [Parameter] public List<string> Images { get; set; } = new List<string>();

    /// <summary>
    /// 图片名称列表
    /// </summary>
    [Parameter] public List<string>? Alts { get; set; }

    /// <summary>
    /// 组件初始化参数
    /// </summary>
    [Parameter] public ViewerOptions Options { get; set; } = new ViewerOptions();

    /// <summary>
    /// 组件ID
    /// </summary>
    [Parameter] public string ID { get; set; }

    private IJSObjectReference? module;

    protected override void OnInitialized()
    {
        Options ??= new ViewerOptions();
        if (!string.IsNullOrEmpty(ID)) Options.id = ID; else Options.id = Guid.NewGuid().ToString();
        Images ??= new List<string>();
        if (!Images.Any())
        {
            for (int i = 1; i <= 9; i++)
            {
                Images.Add($"https://fengyuanchen.github.io/viewerjs/images/thumbnails/tibet-{i}.jpg");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Densen.Component.Blazor/js/viewerjs.js");
            await module.InvokeVoidAsync("initOptions", Options);
        }
    }

    public async Task OnOptionsChanged(ViewerOptions options) => await module.InvokeVoidAsync("initOptions", options);

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/viewerjs/1.10.3/viewer.min.css" rel="stylesheet" />

<style>
    .docs-galley {
        padding: 40px;
        width: 400px;
    }

    .docs-pictures {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        .docs-pictures > li {
            border: 1px solid transparent;
            float: left;
            height: calc(100% / 3);
            margin: 0 -1px -1px 0;
            overflow: hidden;
            width: calc(100% / 3);
        }

            .docs-pictures > li > img {
                cursor: -webkit-zoom-in;
                cursor: zoom-in;
                width: 100%;
            }

    img {
        vertical-align: middle;
        border-style: none;
    }
</style>

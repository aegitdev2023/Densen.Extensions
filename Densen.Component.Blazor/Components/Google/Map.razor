@implements IAsyncDisposable
@inject IJSRuntime JS
@namespace AmeBlazor.Components
@inject IConfiguration config

    <div id="map" style="height:500px;width:100%;">
    </div>
    <button class="btn btn-primary" type="button" onclick="@OnBtnClick">Init</button>

    @code{

        /// <summary>
        /// 获得/设置 错误回调方法
        /// </summary>
        [Parameter]
        public Func<string, Task>? OnError { get; set; }

        private IJSObjectReference? module;
        private string key = String.Empty ;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                key = config["GoogleKey"];
                module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Densen.Component.Blazor/lib/google/map.js");
                while (!(await Init()))
                {
                    await Task.Delay(100);
                }

                //await module.InvokeVoidAsync("initMaps"  );
            }
        }

        public async Task OnOptionsChanged(ViewerOptions options) => await module!.InvokeVoidAsync("init", options);

        public async Task<bool> Init() => await module!.InvokeAsync<bool>("init", new object?[] { key, null, null, null, null });

        public async Task OnBtnClick() => await module!.InvokeVoidAsync("init", new object?[] { key, null, null, null, null });

        /// <summary>
        /// 加载SDK完成回调方法
        /// </summary>
        /// <param name="watchID"></param>
        /// <returns></returns>
        [JSInvokable]
        public async Task UpdateWatchID(bool loaded)
        {
            await module!.InvokeVoidAsync("initMaps");
        }

        async ValueTask IAsyncDisposable.DisposeAsync()
        {
            if (module is not null)
            {
                //await module.InvokeVoidAsync("destroy", Options);
                await module.DisposeAsync();
            }
        }
    }


